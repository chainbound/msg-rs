[workspace]
members = [
  "msg",
  "msg-socket",
  "msg-wire",
  "msg-transport",
  "msg-common",
  "msg-sim",
]
resolver = "2"

[workspace.package]
version = "0.1.3"
edition = "2021"
rust-version = "1.75"
license = "MIT"
description = "A flexible and lightweight messaging library for distributed systems"
authors = ["Jonas Bostoen", "Nicolas Racchi"]
homepage = "https://github.com/chainbound/msg-rs"
repository = "https://github.com/chainbound/msg-rs"
keywords = [
  "messaging",
  "distributed",
  "systems",
  "networking",
  "quic",
  "quinn",
  "tokio",
  "async",
  "simulation",
  "pnet",
  "udp",
  "tcp",
  "socket",
]

[workspace.dependencies]
msg-wire = { path = "./msg-wire" }
msg-socket = { path = "./msg-socket" }
msg-transport = { path = "./msg-transport" }
msg-common = { path = "./msg-common" }
msg-sim = { path = "./msg-sim" }

# async
async-trait = "0.1"
tokio = { version = "1", features = ["full"] }
tokio-util = { version = "0.7", features = ["codec"] }
futures = "0.3"
tokio-stream = { version = "0.1", features = ["sync"] }
parking_lot = "0.12"

# general
bytes = "1"
thiserror = "1"
tracing = "0.1"
rustc-hash = "1"
rand = "0.8"

# networking
quinn = "0.10"
# (rustls needs to be the same version as the one used by quinn)
rustls = { version = "0.21", features = ["quic", "dangerous_configuration"] }
rcgen = "0.12"

# benchmarking & profiling
criterion = { version = "0.5", features = ["async_tokio"] }
pprof = { version = "0.13", features = ["flamegraph", "criterion"] }

# simulation
pnet = "0.34"

# *nix APIs
nix = { version = "0.27.1", features = ["sched"] }

[profile.dev]
opt-level = 1
overflow-checks = false

[profile.bench]
debug = true

[profile.maxperf]
inherits = "release"
debug = false
lto = true
codegen-units = 1
opt-level = 3

[profile.debug-maxperf]
inherits = "maxperf"
debug = true

[workspace.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[workspace.lints.rustdoc]
all = "warn"

[workspace.lints.rust]
missing_debug_implementations = "warn"
missing_docs = "warn"
rust-2018-idioms = { level = "deny", priority = -1 }
unreachable-pub = "warn"
unused-must-use = "deny"

[workspace.lints.clippy]
# These are some of clippy's nursery (i.e., experimental) lints that we like.
# By default, nursery lints are allowed. Some of the lints below have made good
# suggestions which we fixed. The others didn't have any findings, so we can
# assume they don't have that many false positives. Let's enable them to
# prevent future problems.
branches_sharing_code = "warn"
clear_with_drain = "warn"
derive_partial_eq_without_eq = "warn"
doc_markdown = "warn"
empty_line_after_doc_comments = "warn"
empty_line_after_outer_attr = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
flat_map_option = "warn"
imprecise_flops = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
iter_with_drain = "warn"
iter_without_into_iter = "warn"
large_stack_frames = "warn"
manual_assert = "warn"
manual_clamp = "warn"
manual_string_new = "warn"
match_same_arms = "warn"
missing_const_for_fn = "warn"
mutex_integer = "warn"
naive_bytecount = "warn"
needless_bitwise_bool = "warn"
needless_continue = "warn"
needless_pass_by_ref_mut = "warn"
nonstandard_macro_braces = "warn"
or_fun_call = "warn"
path_buf_push_overwrite = "warn"
read_zero_byte_vec = "warn"
redundant_clone = "warn"
single_char_pattern = "warn"
string_lit_as_bytes = "warn"
suboptimal_flops = "warn"
suspicious_operation_groupings = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
transmute_undefined_repr = "warn"
trivial_regex = "warn"
tuple_array_conversions = "warn"
type_repetition_in_bounds = "warn"
uninhabited_references = "warn"
unnecessary_struct_initialization = "warn"
unused_peekable = "warn"
unused_rounding = "warn"
use_self = "warn"
useless_let_if_seq = "warn"
zero_sized_map_values = "warn"

# These are nursery lints which have findings. Allow them for now. Some are not
# quite mature enough for use in our codebase and some we don't really want.
# Explicitly listing should make it easier to fix in the future.
as_ptr_cast_mut = "allow"
cognitive_complexity = "allow"
collection_is_never_read = "allow"
debug_assert_with_mut_call = "allow"
fallible_impl_from = "allow"
future_not_send = "allow"
needless_collect = "allow"
non_send_fields_in_send_ty = "allow"
redundant_pub_crate = "allow"
significant_drop_in_scrutinee = "allow"
significant_drop_tightening = "allow"
